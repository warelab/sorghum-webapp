{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,E,I,E,E,oB,E,E,oB,E,E,oB,E,E,oB,E,oB,E,oB,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,a,C,M,C,E,a,C,C,G,O,c,C,E,O,C,U,C,I,I,E,I,K,E,W,C,E,a,C,C,GEMA,IAAM,EAAe,AAAA,GACnB,AAAI,EAAO,KAAK,CAAC,QAAQ,CAChB,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,IADV,CACY,KAAM,CAAC,+BAA+B,EAAE,EAAO,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,KAAA,CAAM,CAAE,OAAO,SAAU,SAAA,EAAO,KAAK,CAAC,KAAK,A,GAEpH,EAAO,KAAK,CAAC,KAAK,CAErB,EAAiB,AAAA,GAEd,KAAK,SAAS,CADF,EAAO,KAAK,CACE,KAAK,GA8DxC,IAAA,EAAe,AAAA,CAAA,EAAA,EAAA,OAAA,AAAA,EACb,0BACA,2BA9DY,AAAA,IACZ,IAAI,EAAU,EAAM,iBAAiB,CAAC,EAAM,EAAE,CAAC,CAC3C,EAAiB,EAAE,CACnB,EAAiB,CAAC,CAAE,MAAO,WAAY,aAAc,CAAe,EAAE,CACtE,EAAS,CAAC,EACd,EAAQ,OAAO,CAAC,CAAC,EAAQ,KACvB,GAAI,AAAQ,IAAR,EAAW,CACb,IAAI,EAAU,CACZ,WAAY,yBACZ,SAAU,EAAE,AACd,EACA,EAAO,MAAM,CAAC,OAAO,CAAC,AAAA,IACpB,EAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAO,EAAO,IAAI,CAAE,aAAc,CAAY,GACrE,CAAQ,CAAC,EAAO,IAAI,CAAC,CAAG,CAAA,CAC1B,GACA,EAAe,IAAI,CAAC,GACpB,IAAI,EAAkB,CACpB,WAAY,yBACZ,SAAU,EAAE,AACd,EACA,EAAO,cAAc,CAAC,OAAO,CAAC,AAAA,IACvB,CAAQ,CAAC,EAAG,IAAI,CAAC,EACpB,EAAgB,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAO,EAAG,IAAI,CAAE,aAAc,CAAY,EAE7E,GACA,EAAe,IAAI,CAAC,EACtB,CACA,IAAI,EAAS,CAAC,SAAU,CAAM,EAC9B,EAAO,MAAM,CAAC,OAAO,CAAC,AAAA,IACpB,CAAM,CAAC,EAAO,IAAI,CAAC,CAAG,CAAC,MAAO,EAAO,KAAK,AAAA,EACtC,EAAO,QAAQ,GACjB,CAAM,CAAC,EAAO,IAAI,CAAC,CAAC,QAAW,CAAG,EAAO,QAAQ,CACjD,CAAM,CAAC,EAAO,IAAI,CAAC,CAAC,EAAK,CAAG,EAAO,EAAE,CAEzC,GACA,EAAO,cAAc,CAAC,OAAO,CAAC,AAAA,IAC5B,CAAM,CAAC,EAAG,IAAI,CAAC,CAAG,CAAC,MAAO,EAAG,KAAK,AAAA,EAC9B,EAAG,QAAQ,GACb,CAAM,CAAC,EAAG,IAAI,CAAC,CAAC,QAAW,CAAG,EAAG,QAAQ,CACzC,CAAM,CAAC,EAAG,IAAI,CAAC,CAAC,EAAK,CAAG,EAAG,EAAE,CAEjC,GACA,EAAe,IAAI,CAAC,EACtB,GACA,GAAM,CAAC,EAAS,EAAW,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,GACjC,CAAC,EAAS,EAAW,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,GACjC,EAAgB,AAAA,CAAA,EAAA,EAAA,OAAA,AAAA,EAAQ,IACrB,CAAA,CACL,OAAQ,CAAA,CACV,CAAA,EACC,EAAE,EACL,MACE,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MADH,C,S,CAEI,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,kBAAkB,MAAO,CAAC,OAAQ,CAAA,EAAG,GAAM,CAAA,EAAQ,MAAM,CAAG,CAAA,EAAG,EAAE,CAAC,AAAA,EAC/E,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,WAAU,CAAX,CAAa,QAAS,EAAS,WAAY,EAAS,cAAe,C,E,GAErE,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,IAAD,CAAG,KAAM,CAAC,sCAAsC,EAAE,EAAM,EAAE,CAAA,CAAE,C,S,CAAE,yBAAuB,EAAM,EAAE,C,A,G,A,EAGnG,E,E,E,C,mB,Q,mB,Q,mB,Q,mB,Q,mB,Q,mB,O,E,C,M,C,W,E,C,E,C,M,C,W,E,C,E,E,E,C,E","sources":["<anon>","node_modules/gramene-search/dist/Study.826d318c.js","node_modules/gramene-search/dist/src/components/results/Study.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"adpJR\":[function(require,module,exports) {\nvar $eTR7Q$reactjsxruntime = require(\"5d2664204410881d\");\nvar $eTR7Q$react = require(\"74fcc44623a28009\");\nvar $eTR7Q$reduxbundlerreact = require(\"73bc7cc7f463b05a\");\nvar $eTR7Q$aggridreact = require(\"34396b71ef125e48\");\nrequire(\"4c8d9339eb81264d\");\nrequire(\"6b872dd183e87d70\");\nfunction $parcel$defineInteropFlag(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true,\n        configurable: true\n    });\n}\nfunction $parcel$export(e, n, v, s) {\n    Object.defineProperty(e, n, {\n        get: v,\n        set: s,\n        enumerable: true,\n        configurable: true\n    });\n}\nvar $parcel$global = globalThis;\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7zuJ6\", function(module, exports) {\n    $parcel$defineInteropFlag(module.exports);\n    $parcel$export(module.exports, \"default\", ()=>$5833a2eeefc77457$export$2e2bcd8739ae039);\n    const $5833a2eeefc77457$var$metaRenderer = (params)=>{\n        if (params.value.ontology) return /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsx)(\"a\", {\n            href: `http://purl.obolibrary.org/obo/${params.value.id.replace(\":\", \"_\")}`,\n            target: \"_blank\",\n            children: params.value.label\n        });\n        return params.value.label;\n    };\n    const $5833a2eeefc77457$var$sampleRenderer = (params)=>{\n        const sampleMeta = params.value;\n        return JSON.stringify(sampleMeta, null, 2);\n    };\n    const $5833a2eeefc77457$var$Study = (props)=>{\n        let samples = props.expressionSamples[props.id];\n        let sampleMetadata = [];\n        let metadataFields = [\n            {\n                field: \"sampleId\",\n                cellRenderer: $5833a2eeefc77457$var$sampleRenderer\n            }\n        ];\n        let isFactor = {};\n        samples.forEach((sample, idx)=>{\n            if (idx === 0) {\n                let factors = {\n                    headerName: \"Experimental Variables\",\n                    children: []\n                };\n                sample.factor.forEach((factor)=>{\n                    factors.children.push({\n                        field: factor.type,\n                        cellRenderer: $5833a2eeefc77457$var$metaRenderer\n                    });\n                    isFactor[factor.type] = true;\n                });\n                metadataFields.push(factors);\n                let characteristics = {\n                    headerName: \"Sample Characteristics\",\n                    children: []\n                };\n                sample.characteristic.forEach((ch)=>{\n                    if (!isFactor[ch.type]) characteristics.children.push({\n                        field: ch.type,\n                        cellRenderer: $5833a2eeefc77457$var$metaRenderer\n                    });\n                });\n                metadataFields.push(characteristics);\n            }\n            let s_info = {\n                sampleId: sample\n            };\n            sample.factor.forEach((factor)=>{\n                s_info[factor.type] = {\n                    label: factor.label\n                };\n                if (factor.ontology) {\n                    s_info[factor.type][\"ontology\"] = factor.ontology;\n                    s_info[factor.type][\"id\"] = factor.id;\n                }\n            });\n            sample.characteristic.forEach((ch)=>{\n                s_info[ch.type] = {\n                    label: ch.label\n                };\n                if (ch.ontology) {\n                    s_info[ch.type][\"ontology\"] = ch.ontology;\n                    s_info[ch.type][\"id\"] = ch.id;\n                }\n            });\n            sampleMetadata.push(s_info);\n        });\n        const [rowData, setRowData] = (0, $eTR7Q$react.useState)(sampleMetadata);\n        const [colDefs, setColDefs] = (0, $eTR7Q$react.useState)(metadataFields);\n        const defaultColDef = (0, $eTR7Q$react.useMemo)(()=>{\n            return {\n                filter: true\n            };\n        }, []);\n        return /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsxs)(\"div\", {\n            children: [\n                /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsx)(\"div\", {\n                    className: \"ag-theme-quartz\",\n                    style: {\n                        height: `${44 * (samples.length + 2)}px`\n                    },\n                    children: /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsx)($eTR7Q$aggridreact.AgGridReact, {\n                        rowData: rowData,\n                        columnDefs: colDefs,\n                        defaultColDef: defaultColDef\n                    })\n                }),\n                /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsxs)(\"a\", {\n                    href: `https://www.ebi.ac.uk/gxa/experiments/${props.id}`,\n                    children: [\n                        \"EBI Atlas Experiment: \",\n                        props.id\n                    ]\n                })\n            ]\n        });\n    };\n    var $5833a2eeefc77457$export$2e2bcd8739ae039 = (0, $eTR7Q$reduxbundlerreact.connect)(\"selectExpressionSamples\", \"doToggleExpressionSample\", $5833a2eeefc77457$var$Study);\n});\n\n},{\"5d2664204410881d\":\"gaGEj\",\"74fcc44623a28009\":\"6uln9\",\"73bc7cc7f463b05a\":\"gYgw3\",\"34396b71ef125e48\":\"7Ef3H\",\"4c8d9339eb81264d\":\"dWbzV\",\"6b872dd183e87d70\":\"cSUeE\"}],\"dWbzV\":[function() {},{}],\"cSUeE\":[function() {},{}]},[], null, \"parcelRequire7b36\")\n\n//# sourceMappingURL=Study.826d318c.81be36b9.js.map\n","var $eTR7Q$reactjsxruntime = require(\"react/jsx-runtime\");\nvar $eTR7Q$react = require(\"react\");\nvar $eTR7Q$reduxbundlerreact = require(\"redux-bundler-react\");\nvar $eTR7Q$aggridreact = require(\"ag-grid-react\");\nrequire(\"ag-grid-community/styles/ag-grid.css\");\nrequire(\"ag-grid-community/styles/ag-theme-quartz.css\");\n\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7zuJ6\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $5833a2eeefc77457$export$2e2bcd8739ae039);\n\n\n\n\n\n\nconst $5833a2eeefc77457$var$metaRenderer = (params)=>{\n    if (params.value.ontology) return /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsx)(\"a\", {\n        href: `http://purl.obolibrary.org/obo/${params.value.id.replace(\":\", \"_\")}`,\n        target: \"_blank\",\n        children: params.value.label\n    });\n    return params.value.label;\n};\nconst $5833a2eeefc77457$var$sampleRenderer = (params)=>{\n    const sampleMeta = params.value;\n    return JSON.stringify(sampleMeta, null, 2);\n};\nconst $5833a2eeefc77457$var$Study = (props)=>{\n    let samples = props.expressionSamples[props.id];\n    let sampleMetadata = [];\n    let metadataFields = [\n        {\n            field: \"sampleId\",\n            cellRenderer: $5833a2eeefc77457$var$sampleRenderer\n        }\n    ];\n    let isFactor = {};\n    samples.forEach((sample, idx)=>{\n        if (idx === 0) {\n            let factors = {\n                headerName: 'Experimental Variables',\n                children: []\n            };\n            sample.factor.forEach((factor)=>{\n                factors.children.push({\n                    field: factor.type,\n                    cellRenderer: $5833a2eeefc77457$var$metaRenderer\n                });\n                isFactor[factor.type] = true;\n            });\n            metadataFields.push(factors);\n            let characteristics = {\n                headerName: 'Sample Characteristics',\n                children: []\n            };\n            sample.characteristic.forEach((ch)=>{\n                if (!isFactor[ch.type]) characteristics.children.push({\n                    field: ch.type,\n                    cellRenderer: $5833a2eeefc77457$var$metaRenderer\n                });\n            });\n            metadataFields.push(characteristics);\n        }\n        let s_info = {\n            sampleId: sample\n        };\n        sample.factor.forEach((factor)=>{\n            s_info[factor.type] = {\n                label: factor.label\n            };\n            if (factor.ontology) {\n                s_info[factor.type]['ontology'] = factor.ontology;\n                s_info[factor.type]['id'] = factor.id;\n            }\n        });\n        sample.characteristic.forEach((ch)=>{\n            s_info[ch.type] = {\n                label: ch.label\n            };\n            if (ch.ontology) {\n                s_info[ch.type]['ontology'] = ch.ontology;\n                s_info[ch.type]['id'] = ch.id;\n            }\n        });\n        sampleMetadata.push(s_info);\n    });\n    const [rowData, setRowData] = (0, $eTR7Q$react.useState)(sampleMetadata);\n    const [colDefs, setColDefs] = (0, $eTR7Q$react.useState)(metadataFields);\n    const defaultColDef = (0, $eTR7Q$react.useMemo)(()=>{\n        return {\n            filter: true\n        };\n    }, []);\n    return /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsxs)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsx)(\"div\", {\n                className: \"ag-theme-quartz\",\n                style: {\n                    height: `${44 * (samples.length + 2)}px`\n                },\n                children: /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsx)((0, $eTR7Q$aggridreact.AgGridReact), {\n                    rowData: rowData,\n                    columnDefs: colDefs,\n                    defaultColDef: defaultColDef\n                })\n            }),\n            /*#__PURE__*/ (0, $eTR7Q$reactjsxruntime.jsxs)(\"a\", {\n                href: `https://www.ebi.ac.uk/gxa/experiments/${props.id}`,\n                children: [\n                    \"EBI Atlas Experiment: \",\n                    props.id\n                ]\n            })\n        ]\n    });\n};\nvar $5833a2eeefc77457$export$2e2bcd8739ae039 = (0, $eTR7Q$reduxbundlerreact.connect)('selectExpressionSamples', 'doToggleExpressionSample', $5833a2eeefc77457$var$Study);\n\n});\n\n\n//# sourceMappingURL=Study.826d318c.js.map\n","import React, { useState, useMemo } from 'react'\nimport {connect} from \"redux-bundler-react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\n\nconst metaRenderer = params => {\n  if (params.value.ontology) {\n    return <a href={`http://purl.obolibrary.org/obo/${params.value.id.replace(\":\",\"_\")}`} target='_blank'>{params.value.label}</a>\n  }\n  return params.value.label\n}\nconst sampleRenderer = params => {\n  const sampleMeta = params.value;\n  return JSON.stringify(sampleMeta,null,2);\n}\nconst Study = props => {\n  let samples = props.expressionSamples[props.id];\n  let sampleMetadata = [];\n  let metadataFields = [{ field: \"sampleId\", cellRenderer: sampleRenderer }];\n  let isFactor={};\n  samples.forEach((sample, idx) => {\n    if (idx === 0) {\n      let factors = {\n        headerName: 'Experimental Variables',\n        children: []\n      }\n      sample.factor.forEach(factor => {\n        factors.children.push({field: factor.type, cellRenderer: metaRenderer})\n        isFactor[factor.type] = true;\n      });\n      metadataFields.push(factors);\n      let characteristics = {\n        headerName: 'Sample Characteristics',\n        children: []\n      }\n      sample.characteristic.forEach(ch => {\n        if (!isFactor[ch.type]) {\n          characteristics.children.push({field: ch.type, cellRenderer: metaRenderer})\n        }\n      });\n      metadataFields.push(characteristics)\n    }\n    let s_info = {sampleId: sample}\n    sample.factor.forEach(factor => {\n      s_info[factor.type] = {label: factor.label};\n      if (factor.ontology) {\n        s_info[factor.type]['ontology'] = factor.ontology\n        s_info[factor.type]['id'] = factor.id;\n      }\n    })\n    sample.characteristic.forEach(ch => {\n      s_info[ch.type] = {label: ch.label};\n      if (ch.ontology) {\n        s_info[ch.type]['ontology'] = ch.ontology\n        s_info[ch.type]['id'] = ch.id;\n      }\n    })\n    sampleMetadata.push(s_info)\n  })\n  const [rowData, setRowData] = useState(sampleMetadata);\n  const [colDefs, setColDefs] = useState(metadataFields);\n  const defaultColDef = useMemo(() => {\n    return {\n      filter: true\n    }\n  }, []);\n  return (\n    <div>\n      <div className=\"ag-theme-quartz\" style={{height: `${44 * (samples.length + 2)}px`}}>\n        <AgGridReact rowData={rowData} columnDefs={colDefs} defaultColDef={defaultColDef}/>\n      </div>\n      <a href={`https://www.ebi.ac.uk/gxa/experiments/${props.id}`}>EBI Atlas Experiment: {props.id}</a>\n    </div>\n  );\n};\nexport default connect(\n  'selectExpressionSamples',\n  'doToggleExpressionSample',\n  Study);\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","$eTR7Q$reactjsxruntime","$eTR7Q$react","$eTR7Q$reduxbundlerreact","$eTR7Q$aggridreact","parcelRegister","parcelRequire","$parcel$global","value","configurable","$5833a2eeefc77457$export$2e2bcd8739ae039","set","s","enumerable","$5833a2eeefc77457$var$metaRenderer","params","ontology","jsx","href","replace","target","children","label","$5833a2eeefc77457$var$sampleRenderer","JSON","stringify","connect","props","samples","expressionSamples","sampleMetadata","metadataFields","field","cellRenderer","isFactor","forEach","sample","idx","factors","headerName","factor","push","type","characteristics","characteristic","ch","s_info","sampleId","rowData","setRowData","useState","colDefs","setColDefs","defaultColDef","useMemo","filter","jsxs","className","style","height","AgGridReact","columnDefs"],"version":3,"file":"Study.826d318c.81be36b9.js.map"}